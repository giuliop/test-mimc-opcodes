#pragma version 11

mimc.Mimc.approval_program:
    // contract/mimc.py:8
    // class Mimc(py.ARC4Contract):
    txn NumAppArgs
    bz main_bare_routing@6
    method "mimc_BN254(byte[])byte[32]"
    method "mimc_BLS12_381(byte[])byte[32]"
    txna ApplicationArgs 0
    match main_mimc_BN254_route@2 main_mimc_BLS12_381_route@3
    err // reject transaction

main_mimc_BN254_route@2:
    // contract/mimc.py:13
    // @abimethod
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // contract/mimc.py:8
    // class Mimc(py.ARC4Contract):
    txna ApplicationArgs 1
    extract 2 0
    // contract/mimc.py:13
    // @abimethod
    callsub mimc_BN254
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_mimc_BLS12_381_route@3:
    // contract/mimc.py:20
    // @abimethod
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // contract/mimc.py:8
    // class Mimc(py.ARC4Contract):
    txna ApplicationArgs 1
    extract 2 0
    // contract/mimc.py:20
    // @abimethod
    callsub mimc_BLS12_381
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_bare_routing@6:
    // contract/mimc.py:8
    // class Mimc(py.ARC4Contract):
    txn OnCompletion
    switch main_barecall@7 main_reject_bare_on_completion@8 main_reject_bare_on_completion@8 main_reject_bare_on_completion@8 main_barecall@7 main_barecall@7
    err // reject transaction

main_barecall@7:
    // contract/mimc.py:9-10
    // @baremethod(create='allow', allow_actions=['UpdateApplication', 'DeleteApplication', 'NoOp'])
    // def barecall(self) -> None:
    callsub barecall
    int 1
    return

main_reject_bare_on_completion@8:
    // contract/mimc.py:8
    // class Mimc(py.ARC4Contract):
    err // reject transaction


// mimc.Mimc.mimc_BN254(data: bytes) -> bytes:
mimc_BN254:
    // contract/mimc.py:13-14
    // @abimethod
    // def mimc_BN254(self, data: py.Bytes) -> Bytes32:
    proto 1 1
    // contract/mimc.py:15-17
    // # we use the sha opcode as a placeholder to make puyapy compile,
    // # then we substitute it with the new mimc BN254g1 in the compiled teal
    // result = py.op.mimc BN254g1(data)
    frame_dig -1
    mimc BN254g1
    // contract/mimc.py:18
    // return Bytes32.from_bytes(result)
    retsub


// mimc.Mimc.mimc_BLS12_381(data: bytes) -> bytes:
mimc_BLS12_381:
    // contract/mimc.py:20-21
    // @abimethod
    // def mimc_BLS12_381(self, data: py.Bytes) -> Bytes32:
    proto 1 1
    // contract/mimc.py:22-24
    // # we use the keccak opcode as a placeholder to make puyapy compile,
    // # then we substitute it with the new mimc BLS12_381g1 in the compiled teal
    // result = py.op.mimc BLS12_381g1(data)
    frame_dig -1
    mimc BLS12_381g1
    // contract/mimc.py:25
    // return Bytes32.from_bytes(result)
    retsub


// mimc.Mimc.barecall() -> void:
barecall:
    // contract/mimc.py:9-10
    // @baremethod(create='allow', allow_actions=['UpdateApplication', 'DeleteApplication', 'NoOp'])
    // def barecall(self) -> None:
    proto 0 0
    retsub
